// Generated by gencpp from file platooning/targetAngle.msg
// DO NOT EDIT!


#ifndef PLATOONING_MESSAGE_TARGETANGLE_H
#define PLATOONING_MESSAGE_TARGETANGLE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace platooning
{
template <class ContainerAllocator>
struct targetAngle_
{
  typedef targetAngle_<ContainerAllocator> Type;

  targetAngle_()
    : steering_angle(0.0)  {
    }
  targetAngle_(const ContainerAllocator& _alloc)
    : steering_angle(0.0)  {
  (void)_alloc;
    }



   typedef float _steering_angle_type;
  _steering_angle_type steering_angle;





  typedef boost::shared_ptr< ::platooning::targetAngle_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::platooning::targetAngle_<ContainerAllocator> const> ConstPtr;

}; // struct targetAngle_

typedef ::platooning::targetAngle_<std::allocator<void> > targetAngle;

typedef boost::shared_ptr< ::platooning::targetAngle > targetAnglePtr;
typedef boost::shared_ptr< ::platooning::targetAngle const> targetAngleConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::platooning::targetAngle_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::platooning::targetAngle_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace platooning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'platooning': ['/home/stepo/workspace/autonomesfahren/Gruppe-C/catkin_ws/src/platooning/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::platooning::targetAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::platooning::targetAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platooning::targetAngle_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platooning::targetAngle_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platooning::targetAngle_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platooning::targetAngle_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::platooning::targetAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "3de175f327000a99f382f084344450d4";
  }

  static const char* value(const ::platooning::targetAngle_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x3de175f327000a99ULL;
  static const uint64_t static_value2 = 0xf382f084344450d4ULL;
};

template<class ContainerAllocator>
struct DataType< ::platooning::targetAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "platooning/targetAngle";
  }

  static const char* value(const ::platooning::targetAngle_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::platooning::targetAngle_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float32 steering_angle\n\
";
  }

  static const char* value(const ::platooning::targetAngle_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::platooning::targetAngle_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.steering_angle);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct targetAngle_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::platooning::targetAngle_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::platooning::targetAngle_<ContainerAllocator>& v)
  {
    s << indent << "steering_angle: ";
    Printer<float>::stream(s, indent + "  ", v.steering_angle);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLATOONING_MESSAGE_TARGETANGLE_H
