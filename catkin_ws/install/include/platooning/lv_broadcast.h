// Generated by gencpp from file platooning/lv_broadcast.msg
// DO NOT EDIT!


#ifndef PLATOONING_MESSAGE_LV_BROADCAST_H
#define PLATOONING_MESSAGE_LV_BROADCAST_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace platooning
{
template <class ContainerAllocator>
struct lv_broadcast_
{
  typedef lv_broadcast_<ContainerAllocator> Type;

  lv_broadcast_()
    : src_vehicle(0)
    , platoon_id(0)
    , ipd(0.0)
    , ps(0.0)
    , followers()  {
    }
  lv_broadcast_(const ContainerAllocator& _alloc)
    : src_vehicle(0)
    , platoon_id(0)
    , ipd(0.0)
    , ps(0.0)
    , followers(_alloc)  {
  (void)_alloc;
    }



   typedef uint32_t _src_vehicle_type;
  _src_vehicle_type src_vehicle;

   typedef uint32_t _platoon_id_type;
  _platoon_id_type platoon_id;

   typedef float _ipd_type;
  _ipd_type ipd;

   typedef float _ps_type;
  _ps_type ps;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _followers_type;
  _followers_type followers;





  typedef boost::shared_ptr< ::platooning::lv_broadcast_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::platooning::lv_broadcast_<ContainerAllocator> const> ConstPtr;

}; // struct lv_broadcast_

typedef ::platooning::lv_broadcast_<std::allocator<void> > lv_broadcast;

typedef boost::shared_ptr< ::platooning::lv_broadcast > lv_broadcastPtr;
typedef boost::shared_ptr< ::platooning::lv_broadcast const> lv_broadcastConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::platooning::lv_broadcast_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::platooning::lv_broadcast_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace platooning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'platooning': ['/home/stepo/workspace/autonomesfahren/Gruppe-C/catkin_ws/src/platooning/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::platooning::lv_broadcast_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::platooning::lv_broadcast_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platooning::lv_broadcast_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platooning::lv_broadcast_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platooning::lv_broadcast_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platooning::lv_broadcast_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::platooning::lv_broadcast_<ContainerAllocator> >
{
  static const char* value()
  {
    return "a181b9158cc00e160e1fda722b669eac";
  }

  static const char* value(const ::platooning::lv_broadcast_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xa181b9158cc00e16ULL;
  static const uint64_t static_value2 = 0x0e1fda722b669eacULL;
};

template<class ContainerAllocator>
struct DataType< ::platooning::lv_broadcast_<ContainerAllocator> >
{
  static const char* value()
  {
    return "platooning/lv_broadcast";
  }

  static const char* value(const ::platooning::lv_broadcast_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::platooning::lv_broadcast_<ContainerAllocator> >
{
  static const char* value()
  {
    return "uint32 src_vehicle\n\
uint32 platoon_id\n\
float32 ipd\n\
float32 ps\n\
uint32[] followers\n\
";
  }

  static const char* value(const ::platooning::lv_broadcast_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::platooning::lv_broadcast_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.src_vehicle);
      stream.next(m.platoon_id);
      stream.next(m.ipd);
      stream.next(m.ps);
      stream.next(m.followers);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct lv_broadcast_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::platooning::lv_broadcast_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::platooning::lv_broadcast_<ContainerAllocator>& v)
  {
    s << indent << "src_vehicle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.src_vehicle);
    s << indent << "platoon_id: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.platoon_id);
    s << indent << "ipd: ";
    Printer<float>::stream(s, indent + "  ", v.ipd);
    s << indent << "ps: ";
    Printer<float>::stream(s, indent + "  ", v.ps);
    s << indent << "followers[]" << std::endl;
    for (size_t i = 0; i < v.followers.size(); ++i)
    {
      s << indent << "  followers[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.followers[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLATOONING_MESSAGE_LV_BROADCAST_H
