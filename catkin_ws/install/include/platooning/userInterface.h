// Generated by gencpp from file platooning/userInterface.msg
// DO NOT EDIT!


#ifndef PLATOONING_MESSAGE_USERINTERFACE_H
#define PLATOONING_MESSAGE_USERINTERFACE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace platooning
{
template <class ContainerAllocator>
struct userInterface_
{
  typedef userInterface_<ContainerAllocator> Type;

  userInterface_()
    : leading_vehicle(false)
    , following_vehicle(false)
    , potential_following_vehicle(false)
    , inner_platoon_distance(0.0)
    , actual_distance(0.0)
    , platoon_speed(0.0)
    , speed(0.0)
    , platooning_state()
    , src_vehicle(0)
    , platoon_size(0)
    , platoon_members()
    , enable_remotecontrol(false)  {
    }
  userInterface_(const ContainerAllocator& _alloc)
    : leading_vehicle(false)
    , following_vehicle(false)
    , potential_following_vehicle(false)
    , inner_platoon_distance(0.0)
    , actual_distance(0.0)
    , platoon_speed(0.0)
    , speed(0.0)
    , platooning_state(_alloc)
    , src_vehicle(0)
    , platoon_size(0)
    , platoon_members(_alloc)
    , enable_remotecontrol(false)  {
  (void)_alloc;
    }



   typedef uint8_t _leading_vehicle_type;
  _leading_vehicle_type leading_vehicle;

   typedef uint8_t _following_vehicle_type;
  _following_vehicle_type following_vehicle;

   typedef uint8_t _potential_following_vehicle_type;
  _potential_following_vehicle_type potential_following_vehicle;

   typedef float _inner_platoon_distance_type;
  _inner_platoon_distance_type inner_platoon_distance;

   typedef float _actual_distance_type;
  _actual_distance_type actual_distance;

   typedef float _platoon_speed_type;
  _platoon_speed_type platoon_speed;

   typedef float _speed_type;
  _speed_type speed;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _platooning_state_type;
  _platooning_state_type platooning_state;

   typedef uint32_t _src_vehicle_type;
  _src_vehicle_type src_vehicle;

   typedef uint32_t _platoon_size_type;
  _platoon_size_type platoon_size;

   typedef std::vector<uint32_t, typename ContainerAllocator::template rebind<uint32_t>::other >  _platoon_members_type;
  _platoon_members_type platoon_members;

   typedef uint8_t _enable_remotecontrol_type;
  _enable_remotecontrol_type enable_remotecontrol;





  typedef boost::shared_ptr< ::platooning::userInterface_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::platooning::userInterface_<ContainerAllocator> const> ConstPtr;

}; // struct userInterface_

typedef ::platooning::userInterface_<std::allocator<void> > userInterface;

typedef boost::shared_ptr< ::platooning::userInterface > userInterfacePtr;
typedef boost::shared_ptr< ::platooning::userInterface const> userInterfaceConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::platooning::userInterface_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::platooning::userInterface_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace platooning

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/lunar/share/std_msgs/cmake/../msg'], 'platooning': ['/home/stepo/workspace/autonomesfahren/Gruppe-C/catkin_ws/src/platooning/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::platooning::userInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::platooning::userInterface_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platooning::userInterface_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::platooning::userInterface_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platooning::userInterface_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::platooning::userInterface_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::platooning::userInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d1d08fffe38d5dc5a1aad88d74db0b91";
  }

  static const char* value(const ::platooning::userInterface_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd1d08fffe38d5dc5ULL;
  static const uint64_t static_value2 = 0xa1aad88d74db0b91ULL;
};

template<class ContainerAllocator>
struct DataType< ::platooning::userInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "platooning/userInterface";
  }

  static const char* value(const ::platooning::userInterface_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::platooning::userInterface_<ContainerAllocator> >
{
  static const char* value()
  {
    return "bool leading_vehicle\n\
bool following_vehicle\n\
bool potential_following_vehicle\n\
float32 inner_platoon_distance\n\
float32 actual_distance\n\
float32 platoon_speed\n\
float32 speed\n\
string platooning_state\n\
uint32 src_vehicle\n\
uint32 platoon_size\n\
uint32[] platoon_members\n\
bool enable_remotecontrol\n\
";
  }

  static const char* value(const ::platooning::userInterface_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::platooning::userInterface_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.leading_vehicle);
      stream.next(m.following_vehicle);
      stream.next(m.potential_following_vehicle);
      stream.next(m.inner_platoon_distance);
      stream.next(m.actual_distance);
      stream.next(m.platoon_speed);
      stream.next(m.speed);
      stream.next(m.platooning_state);
      stream.next(m.src_vehicle);
      stream.next(m.platoon_size);
      stream.next(m.platoon_members);
      stream.next(m.enable_remotecontrol);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct userInterface_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::platooning::userInterface_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::platooning::userInterface_<ContainerAllocator>& v)
  {
    s << indent << "leading_vehicle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.leading_vehicle);
    s << indent << "following_vehicle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.following_vehicle);
    s << indent << "potential_following_vehicle: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.potential_following_vehicle);
    s << indent << "inner_platoon_distance: ";
    Printer<float>::stream(s, indent + "  ", v.inner_platoon_distance);
    s << indent << "actual_distance: ";
    Printer<float>::stream(s, indent + "  ", v.actual_distance);
    s << indent << "platoon_speed: ";
    Printer<float>::stream(s, indent + "  ", v.platoon_speed);
    s << indent << "speed: ";
    Printer<float>::stream(s, indent + "  ", v.speed);
    s << indent << "platooning_state: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.platooning_state);
    s << indent << "src_vehicle: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.src_vehicle);
    s << indent << "platoon_size: ";
    Printer<uint32_t>::stream(s, indent + "  ", v.platoon_size);
    s << indent << "platoon_members[]" << std::endl;
    for (size_t i = 0; i < v.platoon_members.size(); ++i)
    {
      s << indent << "  platoon_members[" << i << "]: ";
      Printer<uint32_t>::stream(s, indent + "  ", v.platoon_members[i]);
    }
    s << indent << "enable_remotecontrol: ";
    Printer<uint8_t>::stream(s, indent + "  ", v.enable_remotecontrol);
  }
};

} // namespace message_operations
} // namespace ros

#endif // PLATOONING_MESSAGE_USERINTERFACE_H
