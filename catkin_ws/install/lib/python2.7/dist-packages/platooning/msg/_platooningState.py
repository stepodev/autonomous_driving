# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from platooning/platooningState.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class platooningState(genpy.Message):
  _md5sum = "513c3389662a56c9d5dc40bcbdf23890"
  _type = "platooning/platooningState"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string platooning_state
uint32 platoon_id
float32 ipd
float32 ps
uint32 vehicle_id
bool i_am_FV
bool i_am_LV
uint32[] platoon_members"""
  __slots__ = ['platooning_state','platoon_id','ipd','ps','vehicle_id','i_am_FV','i_am_LV','platoon_members']
  _slot_types = ['string','uint32','float32','float32','uint32','bool','bool','uint32[]']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       platooning_state,platoon_id,ipd,ps,vehicle_id,i_am_FV,i_am_LV,platoon_members

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(platooningState, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.platooning_state is None:
        self.platooning_state = ''
      if self.platoon_id is None:
        self.platoon_id = 0
      if self.ipd is None:
        self.ipd = 0.
      if self.ps is None:
        self.ps = 0.
      if self.vehicle_id is None:
        self.vehicle_id = 0
      if self.i_am_FV is None:
        self.i_am_FV = False
      if self.i_am_LV is None:
        self.i_am_LV = False
      if self.platoon_members is None:
        self.platoon_members = []
    else:
      self.platooning_state = ''
      self.platoon_id = 0
      self.ipd = 0.
      self.ps = 0.
      self.vehicle_id = 0
      self.i_am_FV = False
      self.i_am_LV = False
      self.platoon_members = []

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.platooning_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2fI2B().pack(_x.platoon_id, _x.ipd, _x.ps, _x.vehicle_id, _x.i_am_FV, _x.i_am_LV))
      length = len(self.platoon_members)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.platoon_members))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platooning_state = str[start:end].decode('utf-8')
      else:
        self.platooning_state = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.platoon_id, _x.ipd, _x.ps, _x.vehicle_id, _x.i_am_FV, _x.i_am_LV,) = _get_struct_I2fI2B().unpack(str[start:end])
      self.i_am_FV = bool(self.i_am_FV)
      self.i_am_LV = bool(self.i_am_LV)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.platoon_members = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.platooning_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_I2fI2B().pack(_x.platoon_id, _x.ipd, _x.ps, _x.vehicle_id, _x.i_am_FV, _x.i_am_LV))
      length = len(self.platoon_members)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.platoon_members.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platooning_state = str[start:end].decode('utf-8')
      else:
        self.platooning_state = str[start:end]
      _x = self
      start = end
      end += 18
      (_x.platoon_id, _x.ipd, _x.ps, _x.vehicle_id, _x.i_am_FV, _x.i_am_LV,) = _get_struct_I2fI2B().unpack(str[start:end])
      self.i_am_FV = bool(self.i_am_FV)
      self.i_am_LV = bool(self.i_am_LV)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.platoon_members = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_I2fI2B = None
def _get_struct_I2fI2B():
    global _struct_I2fI2B
    if _struct_I2fI2B is None:
        _struct_I2fI2B = struct.Struct("<I2fI2B")
    return _struct_I2fI2B
