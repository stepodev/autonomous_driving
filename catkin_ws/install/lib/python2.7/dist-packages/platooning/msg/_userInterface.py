# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from platooning/userInterface.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class userInterface(genpy.Message):
  _md5sum = "d1d08fffe38d5dc5a1aad88d74db0b91"
  _type = "platooning/userInterface"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """bool leading_vehicle
bool following_vehicle
bool potential_following_vehicle
float32 inner_platoon_distance
float32 actual_distance
float32 platoon_speed
float32 speed
string platooning_state
uint32 src_vehicle
uint32 platoon_size
uint32[] platoon_members
bool enable_remotecontrol"""
  __slots__ = ['leading_vehicle','following_vehicle','potential_following_vehicle','inner_platoon_distance','actual_distance','platoon_speed','speed','platooning_state','src_vehicle','platoon_size','platoon_members','enable_remotecontrol']
  _slot_types = ['bool','bool','bool','float32','float32','float32','float32','string','uint32','uint32','uint32[]','bool']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       leading_vehicle,following_vehicle,potential_following_vehicle,inner_platoon_distance,actual_distance,platoon_speed,speed,platooning_state,src_vehicle,platoon_size,platoon_members,enable_remotecontrol

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(userInterface, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.leading_vehicle is None:
        self.leading_vehicle = False
      if self.following_vehicle is None:
        self.following_vehicle = False
      if self.potential_following_vehicle is None:
        self.potential_following_vehicle = False
      if self.inner_platoon_distance is None:
        self.inner_platoon_distance = 0.
      if self.actual_distance is None:
        self.actual_distance = 0.
      if self.platoon_speed is None:
        self.platoon_speed = 0.
      if self.speed is None:
        self.speed = 0.
      if self.platooning_state is None:
        self.platooning_state = ''
      if self.src_vehicle is None:
        self.src_vehicle = 0
      if self.platoon_size is None:
        self.platoon_size = 0
      if self.platoon_members is None:
        self.platoon_members = []
      if self.enable_remotecontrol is None:
        self.enable_remotecontrol = False
    else:
      self.leading_vehicle = False
      self.following_vehicle = False
      self.potential_following_vehicle = False
      self.inner_platoon_distance = 0.
      self.actual_distance = 0.
      self.platoon_speed = 0.
      self.speed = 0.
      self.platooning_state = ''
      self.src_vehicle = 0
      self.platoon_size = 0
      self.platoon_members = []
      self.enable_remotecontrol = False

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3B4f().pack(_x.leading_vehicle, _x.following_vehicle, _x.potential_following_vehicle, _x.inner_platoon_distance, _x.actual_distance, _x.platoon_speed, _x.speed))
      _x = self.platooning_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.src_vehicle, _x.platoon_size))
      length = len(self.platoon_members)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(struct.pack(pattern, *self.platoon_members))
      buff.write(_get_struct_B().pack(self.enable_remotecontrol))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.leading_vehicle, _x.following_vehicle, _x.potential_following_vehicle, _x.inner_platoon_distance, _x.actual_distance, _x.platoon_speed, _x.speed,) = _get_struct_3B4f().unpack(str[start:end])
      self.leading_vehicle = bool(self.leading_vehicle)
      self.following_vehicle = bool(self.following_vehicle)
      self.potential_following_vehicle = bool(self.potential_following_vehicle)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platooning_state = str[start:end].decode('utf-8')
      else:
        self.platooning_state = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.src_vehicle, _x.platoon_size,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.platoon_members = struct.unpack(pattern, str[start:end])
      start = end
      end += 1
      (self.enable_remotecontrol,) = _get_struct_B().unpack(str[start:end])
      self.enable_remotecontrol = bool(self.enable_remotecontrol)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3B4f().pack(_x.leading_vehicle, _x.following_vehicle, _x.potential_following_vehicle, _x.inner_platoon_distance, _x.actual_distance, _x.platoon_speed, _x.speed))
      _x = self.platooning_state
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_get_struct_2I().pack(_x.src_vehicle, _x.platoon_size))
      length = len(self.platoon_members)
      buff.write(_struct_I.pack(length))
      pattern = '<%sI'%length
      buff.write(self.platoon_members.tostring())
      buff.write(_get_struct_B().pack(self.enable_remotecontrol))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      _x = self
      start = end
      end += 19
      (_x.leading_vehicle, _x.following_vehicle, _x.potential_following_vehicle, _x.inner_platoon_distance, _x.actual_distance, _x.platoon_speed, _x.speed,) = _get_struct_3B4f().unpack(str[start:end])
      self.leading_vehicle = bool(self.leading_vehicle)
      self.following_vehicle = bool(self.following_vehicle)
      self.potential_following_vehicle = bool(self.potential_following_vehicle)
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.platooning_state = str[start:end].decode('utf-8')
      else:
        self.platooning_state = str[start:end]
      _x = self
      start = end
      end += 8
      (_x.src_vehicle, _x.platoon_size,) = _get_struct_2I().unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sI'%length
      start = end
      end += struct.calcsize(pattern)
      self.platoon_members = numpy.frombuffer(str[start:end], dtype=numpy.uint32, count=length)
      start = end
      end += 1
      (self.enable_remotecontrol,) = _get_struct_B().unpack(str[start:end])
      self.enable_remotecontrol = bool(self.enable_remotecontrol)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_B = None
def _get_struct_B():
    global _struct_B
    if _struct_B is None:
        _struct_B = struct.Struct("<B")
    return _struct_B
_struct_3B4f = None
def _get_struct_3B4f():
    global _struct_3B4f
    if _struct_3B4f is None:
        _struct_3B4f = struct.Struct("<3B4f")
    return _struct_3B4f
_struct_2I = None
def _get_struct_2I():
    global _struct_2I
    if _struct_2I is None:
        _struct_2I = struct.Struct("<2I")
    return _struct_2I
